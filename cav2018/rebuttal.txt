Review1

Q1: ”Were you able to find any bugs in existing solvers with your tool? [...] Is the tool more suitable for performance analysis, rather than correctness testing?”

A1: StringFuzz can be used for both, but is more suitable for performance analysis. We used it as such when working with Z3str3, Z3str2 and CVC4. For example it helped find actual implementation bugs (e.g. commits 6308636 to 3865c45, and 66bc68f to 7b536e9) in previous versions of Z3str3, and also helped find performance issues in Z3str3 and CVC4.

Q2: “I am not sure how useful the modified industrial sets are... Is it intended for correctness testing or performance tuning? Solvers are expected to take advantage of structural properties [...] Destroying such properties might lead the solvers astray, but I am not sure if one can learn anything from such experiments...”

A2: Modified industrial instances were useful for performance analysis. Fuzzing them with StringFuzz allowed us to maintain instance structure in some respects, but also make the instance extremal in others. For example in Amazon instances we replaced literals with unprintable characters, and scaled the lengths of literals, without changing any other aspect of the instance.

Review2

Q1: “[...] I would expect some form of evolutionary algorithms [...]”

A1: Thank you for this suggestion! In fact, we’re already working on augmenting StringFuzz with an evolutionary approach.

Q2: “Further, the description of some of the generators and transformers is very brief [...]”

A2: This was intentional, to save space. We provide in-depth generator descriptions/examples on the StringFuzz website[1].

Q3: “[...] both the entire framework as well as the generators and transforms seem to be still relatively simple.”

A3: We respectfully disagree with this point. Some of the transformations are satisfiability-preserving and are fairly complex.

Q4: “Page 3, [...] (a) there should be no indentation there, (b) RegEx is not defined.”

A4: We will fix the indentation and define RegEx.

Q5: “Page 4, [...] (a) two cases of wrong indentation, (b) not clear enough: in particular, can concatenation appear lower in the terms too?”

A5: Indeed, concatenation can only appear on the top level. We will clarify this, and also fix the indentation.

Review3

Q1: “It would be nice to consider extending the fuzzing to cover other theories as well, such as bit-vectors.”

A1: We agree, and are currently extending the fuzzer to support the entire SMT-LIB 2.6 standard.

Review4

Q1: ”Section 3 describes a suite of over 10000 string benchmarks. Section 4 promises an experimental evaluation, but presents results on only a tiny fraction of these benchmarks, including none of the industrial benchmarks. There is no explanation as to why so few results are reported. I think that the paper is pretty weak without a full set of experimental results on the new benchmarks”

A1: We indeed performed experiments on all the suites. We presented the suites that showed interesting behaviour, and for brevity omitted the ones that showed all solvers performing similarly. We currently present all the data and graphs on our website[2]. We will add them to the Appendix.

Q2: “do the tools generally agree on an input syntax?”

A2: They generally agree, but we had to account for two versions of the string syntax. StringFuzz supports both using the --language-in and --language-out flags.

Q3: “The subsection on Regex generating capabilities is rather informal and quite unclear.  Are you mixing SMT-LIB syntax with regular expression syntax at the meta-level?  It's very confusing.”

A3: It is indeed confusing. We will rewrite the example in SMT-LIB syntax only.

Q4: “You mention two data sets, "Concats-Big" and "Concats-Extracts-Small", both of which are not listed in Table 2a.  Where do these data sets come from?”

A4: We grouped Concats-Big and Concats-Small under Concats (and same for Concats-Extracts) in the table for brevity, but that is indeed unclear. We will add them in the table explicitly.

Review5

Q1: “I ran this script [...] but did not see any errors after 30 minutes or so. It would have been nice to say if the StringFuzz tool was able to find any crashing inputs for the string solvers.”

A1: StringFuzz has many options (visible with the --help flag) that may speed up the time to crash. For example “stringfuzzg --random random-ast --meaningful --num-vars 2 --num-asserts 10 --depth 3“ will yield more challenging instances. We discovered errors in Z3str3 with similar scripts, but have not fully explored other solvers.

Review6

Q1: “They didn't manage to build the solver Z3str2 on the VM.”

A1: Indeed, we failed to do it in time for the submission. We apologise.

Q2: “I was surprised to see the checksum for the machine image.”

A2: Indeed, the checksum is invalid when it’s on the VM. It was transferred by mistake. We apologise for the oversight.

[1] http://stringfuzz.dmitryblotsky.com/problems/
[2] http://stringfuzz.dmitryblotsky.com/results/latest/
